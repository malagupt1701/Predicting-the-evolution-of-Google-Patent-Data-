# -*- coding: utf-8 -*-
"""Plots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13dybrjBVUtRVsxdykshXZDGY-4Duew7U
"""

import os
import pandas as pd
import numpy as np
import glob
import datetime
import plotly.express as px
import seaborn as sns
import plotly.graph_objects as go

cd drive/MyDrive/Capstone\ Data\ with\ claims

df18 = pd.read_csv('2018-data-merged.csv')
df19 = pd.read_csv('2019-data-merged.csv')
df20 = pd.read_csv('2020-data-merged.csv')
df21 = pd.read_csv('2021-data-merged.csv')
df22 = pd.read_csv('2022-data-merged.csv')

df18['Year'] = 2018
df19['Year'] = 2019
df20['Year'] = 2020
df21['Year'] = 2021
df22['Year'] = 2022

df = pd.concat([df18,df19,df20,df21,df22], ignore_index=True)

df.head()

df['App_Date'] = pd.to_datetime(df['App_Date'])
files = df#.rename_axis(["file_year", "Unnamed: 0.2"]).reset_index().drop(["Unnamed: 0", "Unnamed: 0.1", "Unnamed: 0.2"], axis=1)
files["pub_ts"] = files["Year"].map(lambda i: pd.Timestamp(f"{i}-{12-2*(i == 2022):02.0f}-31")).sort_values()

# remove lines where the lag is too long to make sense -- 2.5 years or 913 days
mask = ((files["pub_ts"] - files["App_Date"]) < pd.Timedelta(days=913))
files = files[mask]

def compute_seasonal_profile(tbl, since, to):
    seasonal_adj = tbl.divide(tbl.mean(1), axis=0).mean(0)
    seasonal_adj /= seasonal_adj.mean()

    return seasonal_adj

def seasonal_adj_series(data, key, since, to, agg_fun="count"):
    agg = pd.Index(data[key].sort_values()).to_series().resample("M").count()

    tbl = agg.loc[since:to].rename(lambda t: (t.year, t.month))
    tbl.index = pd.MultiIndex.from_tuples(tbl.index)

    agg = agg.rename(lambda t: (t.year, t.month))
    agg.index = pd.MultiIndex.from_tuples(agg.index)

    tbl = tbl.unstack()

    seasonal_adj = compute_seasonal_profile(tbl, since, to).T
    adj = agg.divide(seasonal_adj, axis=0, level=1)
    adj.index = pd.DatetimeIndex(adj.index.map(lambda s: datetime.date(s[0], s[1], 1)))
    return adj


import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

seasonal_adj_series(files, "App_Date", "2017-09", "2020-02").loc["2017-07": "2021-04"].plot()
plt.title('Seasonal Adjusted Applications in the US')
plt.ylabel('Number of Applications')
plt.xlabel('Time Period')
plt.savefig("seasonally_adjusted_patent_apps")

files.dtypes

df18 = pd.read_csv('Org_City_Counts_2018.csv',index_col=0)
df19 = pd.read_csv('Org_City_Counts_2019.csv',index_col=0)
df20 = pd.read_csv('Org_City_Counts_2020.csv',index_col=0)
df21 = pd.read_csv('Org_City_Counts_2021.csv',index_col=0)

total = pd.concat([df18,df19,df20,df21], ignore_index=True).groupby(['Org_City']).sum().sort_values('counts',ascending=False)[:10]
total

top10 = total.index.to_list()[::-1]
top10

df18 = df18[df18['Org_City'].isin(top10)]
df19 = df19[df19['Org_City'].isin(top10)]
df20 = df20[df20['Org_City'].isin(top10)]
df21 = df21[df21['Org_City'].isin(top10)]


df18['Type'] = 'Before COVID'
df19['Type'] = 'Before COVID'
df20['Type'] = 'After COVID'
df21['Type'] = 'After COVID'

filtered = pd.concat([df18,df19,df20,df21], ignore_index=True).groupby(['Org_City','Type']).sum().reset_index()
filtered.head()

precovid = []
postcovid = []

for city in top10:
  precovid.append(filtered[(filtered['Org_City']==city) & (filtered['Type']=='Before COVID')]['counts'].values[0])
  postcovid.append(filtered[(filtered['Org_City']==city) & (filtered['Type']=='After COVID')]['counts'].values[0])

fig = go.Figure()
fig.add_trace(go.Scatter(
    x = precovid,
    y=top10,
    marker=dict(color="crimson", size=12),
    mode="markers",
    name="Pre-covid",
))

fig.add_trace(go.Scatter(
    x=postcovid,
    y=top10,
    marker=dict(color="gold", size=12),
    mode="markers",
    name="Post-covid",
))

fig.update_layout(title="Patent Applications by location",
                  xaxis_title="Number of Patents",
                  yaxis_title="Cities")

fig.show()